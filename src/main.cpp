#include "externals.h"
#include "constants.h"
#include "lexer.h"
#include "parser.h"

#include <iostream>
#include <fstream>

namespace {
  // Helper functions
  void addNodeToSet( std::string, std::string, bool );
  bool doesNodeExist( std::string i);
  
  // Global compiler state
  std::ofstream jsFile;
}



//*****************************************************************************
// The main processing loop
int main (int argc, char* argv[])
{
  // Ensure we have enough arguments
  if (argc < 3) {
    std::cout << "Usage: edge [-p][-i <input file>] [-o <js output file>]"
         << std::endl
         << "You can exclude input flag to start the Edge REPL."
         << std::endl;
    return 1;
  }

  Parser parser = Parser();


  // Parse arguments
  int i = 1;
  while (i < argc) {
    // Parse tree
    if (strcmp(argv[i], "-p") == 0 || strcmp(argv[i], "--parse-tree") == 0) {
      parser.set_opt(EDGE_OPT_PARSETREE, 1);
    }

    // Input
    if (strcmp(argv[i], "-i") == 0 || strcmp(argv[i], "--input") == 0) {
      parser.set_opt(EDGE_OPT_INPUT, 1);

      yyin = fopen(argv[++i], "r");
    }

    // Output
    if (strcmp(argv[i], "-o") == 0 || strcmp(argv[i], "--output") == 0) {
      parser.set_opt(EDGE_OPT_JS, 1);
      jsFile.open(argv[++i]);

      // Prepare JS output file
      jsFile << "/* Generated by Edge v.0.0.1 */\n"
             << "(function() {"
             << "\n  var graph = new Graph2D(document.getElementById('edgecanvas'));"
             << "\n  graph.setOption('applyGravity', false);";
    }

    ++i;
  }

  // If INPUT not specified, start REPL
  if (parser.get_opt(EDGE_OPT_INPUT) == 0) {
    yyin = stdin;

    std::cout << "Edge 0.0.1 REPL"
              << std::endl
              << "To instead read input from file, run \'edge -i inputfile.edge ...''"
              << std::endl;
  }

  // Prepare parser
  // TODO: What is this?
  int token;      // Hold each token code
  yyout = stdout; // Set output stream for flex

  // Begin parsing
  parser.parse();

  // TODO: Replace this with a proper AST
  std::vector<std::string> nodeLines = parser.get_node_lines();
  std::vector<std::string> edgeLines = parser.get_edge_lines();

  // Write nodes to JS
  jsFile << "\n\n  /* Create nodes */";
  for (std::vector<std::string>::iterator it = nodeLines.begin(); it != nodeLines.end(); it++)
    jsFile << *it;
  // Write edges to JS
  jsFile << "\n\n  /* Create edges */";
  for (std::vector<std::string>::iterator it = edgeLines.begin(); it != edgeLines.end(); it++)
    jsFile << *it;

  // Finalize JS output
  jsFile << "\n})();";
  jsFile.close();

  // Return 0 to indicate successful run
  return 0;
}


